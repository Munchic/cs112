iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
return(storage.vector)
}
}
storage.vector <- NULL
results <- iter.RI()
# Assignment function
assignment <- function() {
assig <- foo
# Four coin flips, establishing random assignment
print(foo[sample(3:4),])
assig[1:2,]  <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
print(treatment.group)
return(mean(treatment.group[,2]) - mean(control.group[,2]))
}
foo
# Iterating the Assignment function
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
return(storage.vector)
}
}
storage.vector <- NULL
results <- iter.RI()
# Assignment function
assignment <- function() {
assig <- foo
# Four coin flips, establishing random assignment
print(foo[sample(3:4),])
assig[1:2,]  <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
print(treatment.group)
return(mean(treatment.group[,3]) - mean(control.group[,3]))
}
foo
# Iterating the Assignment function
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
return(storage.vector)
}
}
storage.vector <- NULL
results <- iter.RI()
# Assignment function
assignment <- function() {
assig <- foo
# Four coin flips, establishing random assignment
print(foo[sample(3:4),])
assig[1:2,]  <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
print(treatment.group)
return(mean(treatment.group$observed.turnout) - mean(control$observed.turnout))
}
foo
# Iterating the Assignment function
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
return(storage.vector)
}
}
storage.vector <- NULL
results <- iter.RI()
return(mean(treatment.group$observed.turnout) - mean(control.group$observed.turnout))
# Assignment function
assignment <- function() {
assig <- foo
# Four coin flips, establishing random assignment
print(foo[sample(3:4),])
assig[1:2,]  <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
print(treatment.group)
return(mean(treatment.group$observed.turnout) - mean(control.group$observed.turnout))
}
foo
# Iterating the Assignment function
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
return(storage.vector)
}
}
storage.vector <- NULL
results <- iter.RI()
print(treatment.group[1, 2])
return(mean(treatment.group$observed.turnout) - mean(control.group$observed.turnout))
# Assignment function
assignment <- function() {
assig <- foo
# Four coin flips, establishing random assignment
print(foo[sample(3:4),])
assig[1:2,]  <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
print(treatment.group[1, 2])
return(mean(treatment.group$observed.turnout) - mean(control.group$observed.turnout))
}
foo
# Iterating the Assignment function
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
return(storage.vector)
}
}
storage.vector <- NULL
results <- iter.RI()
print(mean(treatment.group[,2]))
# Assignment function
assignment <- function() {
assig <- foo
# Four coin flips, establishing random assignment
print(foo[sample(3:4),])
assig[1:2,]  <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
print(mean(treatment.group[,2]))
return(mean(treatment.group[,2]) - mean(control.group[,2]))
}
foo
# Iterating the Assignment function
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
return(storage.vector)
}
}
storage.vector <- NULL
results <- iter.RI()
quantile(results, prob = c(0.95, 0.975))
length(unique(results))
print(treatment.group[,2])
# Assignment function
assignment <- function() {
assig <- foo
# Four coin flips, establishing random assignment
print(foo[sample(3:4),])
assig[1:2,]  <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
print(treatment.group[,2])
return(mean(treatment.group[,2]) - mean(control.group[,2]))
}
foo
# Iterating the Assignment function
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
return(storage.vector)
}
}
storage.vector <- NULL
results <- iter.RI()
# Assignment function
assignment <- function() {
assig <- foo
# Four coin flips, establishing random assignment
print(foo[sample(3:4),])
assig[1:2,]  <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
print(treatment.group[,2])
return(mean(list(treatment.group[,2])) - mean(list(control.group[,2])))
}
foo
# Iterating the Assignment function
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
return(storage.vector)
}
}
storage.vector <- NULL
results <- iter.RI()
return(mean(c(treatment.group[,2])) - mean(c(control.group[,2])))
# Assignment function
assignment <- function() {
assig <- foo
# Four coin flips, establishing random assignment
print(foo[sample(3:4),])
assig[1:2,]  <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
print(treatment.group[,2])
return(mean(c(treatment.group[,2])) - mean(c(control.group[,2])))
}
foo
# Iterating the Assignment function
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
return(storage.vector)
}
}
storage.vector <- NULL
results <- iter.RI()
results <- iter.RI()
results <- iter.RI()
results <- iter.RI()
results <- iter.RI()
quantile(results, prob = c(0.95, 0.975))
length(unique(results))
hist(results)
plot(density(results))
abline(v = 5, lwd = 2, col = "red")
hist(results)
results <- iter.RI()
# Assignment function
assignment <- function() {
assig <- foo
# Four coin flips, establishing random assignment
print(foo[sample(3:4),])
assig[1:2,]  <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
return(mean(c(treatment.group[,2])) - mean(c(control.group[,2])))
}
foo
# Iterating the Assignment function
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
{storage.vector[i] <- assignment()
return(storage.vector)
}
}
storage.vector <- NULL
results <- iter.RI()
results <- iter.RI()
quantile(results, prob = c(0.95, 0.975))
length(unique(results))
hist(results)
plot(density(results))
abline(v = 5, lwd = 2, col = "red")
# Assignment function
assignment <- function() {
assig <- foo
# Four coin flips, establishing random assignment
print(foo[sample(3:4),])
assig[1:2,]  <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
return(mean(treatment.group[,2]) - mean(control.group[,2]))
}
foo
# Iterating the Assignment function
iter.RI <- function(iterations = 100000) {
for (i in 1:iterations)
storage.vector[i] <- assignment()
return(storage.vector)
}
storage.vector <- NULL
results <- iter.RI()
# Iterating the Assignment function
iter.RI <- function(iterations = 1000) {
for (i in 1:iterations)
storage.vector[i] <- assignment()
return(storage.vector)
}
storage.vector <- NULL
results <- iter.RI()
warnings()
return(mean(c(treatment.group[,2])) - mean(c(control.group[,2])))
# Assignment function
assignment <- function() {
assig <- foo
# Four coin flips, establishing random assignment
print(foo[sample(3:4),])
assig[1:2,]  <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
return(mean(c(treatment.group[,2])) - mean(c(control.group[,2])))
}
foo
# Iterating the Assignment function
iter.RI <- function(iterations = 1000) {
for (i in 1:iterations)
storage.vector[i] <- assignment()
return(storage.vector)
}
storage.vector <- NULL
results <- iter.RI()
quantile(results, prob = c(0.95, 0.975))
length(unique(results))
hist(results)
plot(density(results))
abline(v = 5, lwd = 2, col = "red")
abline(v = 0.15, lwd = 2, col = "red")
quantile(results, prob = c(0.025, 0.975))
length(unique(results))
hist(results)
plot(density(results))
abline(v = observed.diffmeans, lwd = 2, col = "red")
# Assignment function
assignment <- function() {
# Four coin flips, establishing random assignment
assig        <- foo[sample(1:2),]
assig[3:4,]  <- foo[sample(3:4),]
assig[5:6,]  <- foo[sample(5:6),]
assig[7:8,]  <- foo[sample(7:8),]
treatment.group   <- assig[c(1,3,5,7),]
control.group     <- assig[c(2,4,6,8),]
return(mean(c(treatment.group[,2])) - mean(c(control.group[,2])))
}
foo
# Iterating the Assignment function
iter.RI <- function(iterations = 1000) {
for (i in 1:iterations)
storage.vector[i] <- assignment()
return(storage.vector)
}
storage.vector <- NULL
results <- iter.RI()
quantile(results, prob = c(0.025, 0.975))
length(unique(results))
hist(results)
plot(density(results))
abline(v = observed.diffmeans, lwd = 2, col = "red")
print(observed.diffmeans)
length(unique(results))
?Match
?
Match?
??Match
?Matching
??Matching
library(Matching)
?Match
#
#save data objects
#
X  <- glm1$fitted
Y  <- lalonde$re78
Tr  <- lalonde$treat
#
# one-to-one matching with replacement (the "M=1" option).
# Estimating the treatment effect on the treated (the "estimand" option defaults to ATT).
#
rr  <- Match(Y=Y, Tr=Tr, X=X, M=1);
summary(rr)
# Let's check the covariate balance
# 'nboots' is set to small values in the interest of speed.
# Please increase to at least 500 each for publication quality p-values.
mb  <- MatchBalance(treat~age + I(age^2) + educ + I(educ^2) + black +
hisp + married + nodegr + re74  + I(re74^2) + re75 + I(re75^2) +
u74 + u75, data=lalonde, match.out=rr, nboots=10)
data(lalonde)
#
# Estimate the propensity model
#
glm1  <- glm(treat~age + I(age^2) + educ + I(educ^2) + black +
hisp + married + nodegr + re74  + I(re74^2) + re75 + I(re75^2) +
u74 + u75, family=binomial, data=lalonde)
#
#save data objects
#
X  <- glm1$fitted
Y  <- lalonde$re78
Tr  <- lalonde$treat
#
# one-to-one matching with replacement (the "M=1" option).
# Estimating the treatment effect on the treated (the "estimand" option defaults to ATT).
#
rr  <- Match(Y=Y, Tr=Tr, X=X, M=1);
summary(rr)
# Let's check the covariate balance
# 'nboots' is set to small values in the interest of speed.
# Please increase to at least 500 each for publication quality p-values.
mb  <- MatchBalance(treat~age + I(age^2) + educ + I(educ^2) + black +
hisp + married + nodegr + re74  + I(re74^2) + re75 + I(re75^2) +
u74 + u75, data=lalonde, match.out=rr, nboots=10)
#
# Estimate the propensity model
#
glm1  <- glm(treat~age + I(age^2) + educ + I(educ^2) + black +
hisp + married + nodegr + re74  + I(re74^2) + re75 + I(re75^2) +
u74 + u75, family=binomial, data=lalonde)
glm1
#
#save data objects
#
X  <- glm1$fitted
X
Y  <- lalonde$re78
Tr  <- lalonde$treat
#
# one-to-one matching with replacement (the "M=1" option).
# Estimating the treatment effect on the treated (the "estimand" option defaults to ATT).
#
rr  <- Match(Y=Y, Tr=Tr, X=X, M=1);
summary(rr)
summary(mb)
mb
#
# one-to-one matching with replacement (the "M=1" option).
# Estimating the treatment effect on the treated (the "estimand" option defaults to ATT).
#
rr  <- Match(Y=Y, Tr=Tr, X=X, M=1);
summary(rr)
#
#save data objects
#
X  <- glm1$fitted
X
length(X)
length(lalonde)
nrow(lalonde)
#
# one-to-one matching with replacement (the "M=1" option).
# Estimating the treatment effect on the treated (the "estimand" option defaults to ATT).
#
rr  <- Match(Y=Y, Tr=Tr, X=X, M=1);
summary(rr)
setwd('./Desktop/CS112/')
library(foreign)
data <- read.dta('9.1 dw_data.dta')
data <- read.dta('9.2 dw_data.dta')
head(data)
library(Matching)
GenMatch()
data <- read.dta('9.2 dw_data.dta')
?GenMatch
tr.prob <- glm(treat ~ age + education + black + hispanic + married + nodegree + re74 + re75, data=data)
tr.prob
tr.prob.predict()
predict(tr.prob.predict)
predict(tr.prob)
tr.prob.fitted
tr.prob$fitted
Y <- lalonde$re78
Tr <- tr.prop$treat
Tr <- tr.prob$treat
rr <- GenMatch(Y=Y, Tr=Tr, X=X, M=1);
X <- tr.prob$fitted
Y <- lalonde$re78
Tr <- tr.prob$treat
rr <- GenMatch(Y=Y, Tr=Tr, X=X, M=1);
tr.prob <- glm(treat ~ age + education + black + hispanic + married + nodegree + re74 + re75, data=data)
X <- tr.prob$fitted
Y <- lalonde$re78
Tr <- tr.prob$treat
rr <- GenMatch(Y=Y, Tr=Tr, X=X, M=1);
tr.prob <- glm(treat ~ age + education + black + hispanic + married + nodegree + re74 + re75,
data=data, family=binomial)
X <- tr.prob$fitted
Y <- lalonde$re78
Tr <- tr.prob$treat
rr <- GenMatch(Y=Y, Tr=Tr, X=X, M=1);
X <- tr.prob$fitted
Y <- data$re78
Tr <- data$treat
rr <- GenMatch(Y=Y, Tr=Tr, X=X, M=1);
rr <- GenMatch(Tr=Tr, X=X, M=1);
summary(rr)
?GenMatch
rr <- GenMatch(Tr=Tr, X=X, M=1, pop.size = 100);
summary(rr)
Tr
X
?GenMatch
X <- cbind(data$age, data$education, data$black,
data$hispanic, data$married, data$nodegree,
data$re74, data$re75)
Y <- data$re78
Tr <- data$treat
rr <- GenMatch(Tr=Tr, X=X, M=1, pop.size = 100);
summary(rr)
summary(rr)
