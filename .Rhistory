c
str(c)
demo()
print(c)
a <- c(1, 5, 6, 7)
b <- matr(1:9, byrow = TRUE, nrow = 3)
c <- list(a, b)
a <- c(1, 5, 6, 7)
b <- matrix(1:9, byrow = TRUE, nrow = 3)
c <- list(a, b)
a <- c(1, 5, 6, 7)
b <- matrix(1:9, byrow = TRUE, nrow = 3)
c <- list(a, b)
c
c
a <- c(1, 5, 6, 7)
a <- c(1, 5, 6, 7)
b <- matrix(1:9, byrow = TRUE, nrow = 3)
c <- list(a, b)
c
a <- c(1, 5, 6, 7)
b <- matrix(1:9, byrow = TRUE, nrow = 3)
d <- list(a, b)
new_d <- c(d, "a")
a <- c(1, 5, 6, 7)
b <- matrix(1:9, byrow = TRUE, nrow = 3)
d <- list(a, b)
new_d <- c(d, "a")
new_d
a <- c(1, 5, 6, 7)
b <- matrix(1:9, byrow = TRUE, nrow = 3)
d <- list(a, b)
new_d <- c(d, "a")
d
a <- c(1, 5, 6, 7)
b <- matrix(1:9, byrow = TRUE, nrow = 3)
d <- list(a, b)
new_d <- c(d, "a")
d
new_d
a <- c(1, 5, 6, 7)
b <- matrix(1:9, byrow = TRUE, nrow = 3)
d <- list(a, b)
new_d <- c(d, "a")
d
new_d
a <- c(1, 5, 6, 7)
b <- matrix(1:9, byrow = TRUE, nrow = 3)
d <- list(a, b)
new_d <- c(d, "a")
d
new_d
a <- c(1, 2, 3)
a[-1]
a[-1, -2]
a[-1:2]
a[-2]
a[-c(1, 2)]
?datasets
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
IRkernel::installspec()
installspec()
install.packages("arm")
getwd()
setwd('../Desktop/CS112')
setwd('./Desktop/CS112')
getwd()
df = read.csv("income_level")
df = read.csv("income_level.csv")
df
head(df)
lm(df$Monthly.Income.... ~ df$Age + df$IQ.Level)
regr <- lm(df$Monthly.Income.... ~ df$Age + df$IQ.Level)
model <- lm(df$Monthly.Income.... ~ df$Age + df$IQ.Level)
mse = mean(model$residuals^2)
mse = mean(model$residuals)
print(mse)
print("RMSE = ", mse)
print("RMSE = " +  mse)
print( mse)
print(mse)
print(rmse)
rmse = mean(model$residuals)
print(rmse)
head(df)
spic = read.csv("spicy_minerva.csv")
head(spic)
library(arm)
df = read.csv("income_level.csv")
head(df)
model <- lm(df$Monthly.Income.... ~ df$Age + df$IQ.Level)
rmse = mean(model$residuals)
print(rmse)
spic = read.csv("spicy_minerva.csv")
head(spic)
model <- lm(spic$Chance.to.win ~ spic$Amount.of.liquid..ml.)
rmse = mean(model$residuals)
print(rmse)
amt_food = spic$Amount.of.food..g.
avg_scoville = spic$Average.spiciness..scov.
amt_liquid = spic$Amount.of.liquid..ml.
p_win = 1 / (1 + exp(-(sqrt(amt_food) * log(avg_scoville) - pi * amt_liquid
sqrt(mean((p_win - spic$Chance.to.win)^2))
amt_liquid = spic$Amount.of.liquid..ml.
p_win = 1 / (1 + exp(-(sqrt(amt_food) * log(avg_scoville) - pi * amt_liquid)))
sqrt(mean((p_win - spic$Chance.to.win)^2))
predict(model, [23, 120])
predict(model, df)
df = read.csv("income_level_train.csv")
head(df)
model <- lm(df$Monthly.Income.... ~ df$Age + df$IQ.Level)
rmse = mean(model$residuals)
print(rmse)
test_data = read.csv("income_level_test.csv")
predict(model, test_data)
sqrt(mean((predict(model, test_data) - df$IQ.Level)^2))
df = read.csv("income_level_train.csv")
head(df)
model <- lm(df$Monthly.Income.... ~ df$Age + df$IQ.Level)
rmse = mean(model$residuals)
print(rmse)
test_data = read.csv("income_level_test.csv")
sqrt(mean((predict(model, test_data) - df$IQ.Level)^2))
library(Matching)
package(Matching)
install.packages(Matching)
install.packages("Matching")
library(Matching)
lalonde
Mathing.lalonde
Matching.lalonde
library(Matching)
lalonde
library(datasets)
mtcars
install.packages("Matching")
install.packages("Matching")
install.packages("Matching")
library(Matching)
lalonde
library(arm)
lalonde
install.packages("MASS")
install.packages("MASS")
lalonde
library(MASS)
library(arm)
lalonde
data(lalonde )
data(lalonde)
data(lalonde)
a <- data(lalonde)
a
lalonde
log_regr = glm(lalonde$treat ~ lalonde$age + lalonde$educ + lalonde$u75)
summary(log_ref)
summary(log_regr)
predict(log_regr)
hist(predict(log_regr))
hist(predict(log_regr, type = "response"))
hist(predict(log_regr, type = "response"))
predict(log_regr, type = "response")
predict(log_regr, type = "link")
hist(predict(log_regr, type = "link"))
hist(predict(log_regr, type = "response"))
hist(predict(log_regr, type = "response"))
log_regr = glm(lalonde$treat ~ lalonde$age + lalonde$educ + lalonde$u75 + lalonde$age:lalonde$educ)
summary(log_regr)
hist(predict(log_regr, type = "response"))
+ lalonde$age:lalonde$educ
+ lalonde$age:lalonde$educ
log_regr = glm(lalonde$treat ~ lalonde$age + lalonde$educ + lalonde$u75 + lalonde$age:lalonde$educ)
summary(log_regr)
hist(predict(log_regr, type = "response"))
log_regr$fitted.values
hist(predict(log_regr, type = "response")) # newdata
log_regr = glm(lalonde$treat ~ lalonde$age + lalonde$educ + lalonde$u75 + lalonde$age:lalonde$educ, family = "binomial")
summary(log_regr)
log_regr$fitted.values
hist(predict(log_regr, type = "response")) # newdata
x = (-50:50)/10
y = exp(x) / (1 + exp(x) )
plot(x,y)
x = (-50:50)/10
y = exp(x) / (1 + exp(-x) )
plot(x,y)
x = (-50:50)/10
y = exp(-x) / (1 + exp(-x) )
plot(x,y)
